GET           /                                      controllers.gen.AdminController.adminBackendPage()

# Admin
GET           /admin/admin                           controllers.gen.AdminController.adminBackendPage()
GET           /report/admin                          controllers.gen.AdminController.report(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="")
GET           /new/admin                             controllers.gen.AdminController.getNew()

PUT           /admin/:id                             controllers.gen.AdminController.update(id: Long)
POST          /admin                                 controllers.gen.AdminController.add()


# AdminJournal
GET           /p/adminjournal                        controllers.gen.AdminJournalController.adminJournalPage(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="", page: Integer ?= 1, size:Integer ?=0)
GET           /admin/adminjournal                    controllers.gen.AdminJournalController.adminJournalBackendPage()
GET           /report/adminjournal                   controllers.gen.AdminJournalController.report(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="")
GET           /new/adminjournal                      controllers.gen.AdminJournalController.getNew()



# AssetCard
GET           /p/assetcard                           controllers.gen.AssetCardController.assetCardPage(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="", page: Integer ?= 1, size:Integer ?=0)
GET           /admin/assetcard                       controllers.gen.AssetCardController.assetCardBackendPage()
GET           /report/assetcard                      controllers.gen.AssetCardController.report(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="")
GET           /new/assetcard                         controllers.gen.AssetCardController.getNew()

PUT           /assetcard/:id                         controllers.gen.AssetCardController.update(id: Long)
POST          /assetcard                             controllers.gen.AssetCardController.add()


# AssetHandle
GET           /p/assethandle                         controllers.gen.AssetHandleController.assetHandlePage(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="", page: Integer ?= 1, size:Integer ?=0)
GET           /admin/assethandle                     controllers.gen.AssetHandleController.assetHandleBackendPage()
GET           /report/assethandle                    controllers.gen.AssetHandleController.report(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="")
GET           /new/assethandle                       controllers.gen.AssetHandleController.getNew()

PUT           /assethandle/:id                       controllers.gen.AssetHandleController.update(id: Long)
POST          /assethandle                           controllers.gen.AssetHandleController.add()


# AssetType
GET           /p/assettype                           controllers.gen.AssetTypeController.assetTypePage(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="", page: Integer ?= 1, size:Integer ?=0)
GET           /admin/assettype                       controllers.gen.AssetTypeController.assetTypeBackendPage()
GET           /report/assettype                      controllers.gen.AssetTypeController.report(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="")
GET           /new/assettype                         controllers.gen.AssetTypeController.getNew()

PUT           /assettype/:id                         controllers.gen.AssetTypeController.update(id: Long)
POST          /assettype                             controllers.gen.AssetTypeController.add()


# AssetUse
GET           /p/assetuse                            controllers.gen.AssetUseController.assetUsePage(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="", page: Integer ?= 1, size:Integer ?=0)
GET           /admin/assetuse                        controllers.gen.AssetUseController.assetUseBackendPage()
GET           /report/assetuse                       controllers.gen.AssetUseController.report(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="")
GET           /new/assetuse                          controllers.gen.AssetUseController.getNew()

PUT           /assetuse/:id                          controllers.gen.AssetUseController.update(id: Long)
POST          /assetuse                              controllers.gen.AssetUseController.add()


# Auth
GET           /p/auth                                controllers.gen.AuthController.authPage(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="", page: Integer ?= 1, size:Integer ?=0)
GET           /admin/auth                            controllers.gen.AuthController.authBackendPage()
GET           /report/auth                           controllers.gen.AuthController.report(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="")
GET           /new/auth                              controllers.gen.AuthController.getNew()

PUT           /auth/:id                              controllers.gen.AuthController.update(id: Long)
POST          /auth                                  controllers.gen.AuthController.add()

GET           /auth/:id/users                        controllers.gen.AuthController.getAuthUsers(id: Long, page: Integer ?= 1, size: Integer ?=0)

DELETE        /auth/:id                              controllers.gen.AuthController.delete(id: Long)


# Barcode
GET           /p/barcode                             controllers.gen.BarcodeController.barcodePage(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="", page: Integer ?= 1, size:Integer ?=0)
GET           /admin/barcode                         controllers.gen.BarcodeController.barcodeBackendPage()
GET           /report/barcode                        controllers.gen.BarcodeController.report(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="")
GET           /new/barcode                           controllers.gen.BarcodeController.getNew()

PUT           /barcode/:id                           controllers.gen.BarcodeController.update(id: Long)
POST          /barcode                               controllers.gen.BarcodeController.add()


# Config
GET           /p/config                              controllers.gen.ConfigController.configPage(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="", page: Integer ?= 1, size:Integer ?=0)
GET           /admin/config                          controllers.gen.ConfigController.configBackendPage()
GET           /report/config                         controllers.gen.ConfigController.report(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="")
GET           /new/config                            controllers.gen.ConfigController.getNew()

PUT           /config/:id                            controllers.gen.ConfigController.update(id: Long)
POST          /config                                controllers.gen.ConfigController.add()


# Depart
GET           /p/depart                              controllers.gen.DepartController.departPage(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="", page: Integer ?= 1, size:Integer ?=0)
GET           /admin/depart                          controllers.gen.DepartController.departBackendPage()
GET           /report/depart                         controllers.gen.DepartController.report(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="")
GET           /new/depart                            controllers.gen.DepartController.getNew()

PUT           /depart/:id                            controllers.gen.DepartController.update(id: Long)
POST          /depart                                controllers.gen.DepartController.add()

GET           /depart/:id/materials                  controllers.gen.DepartController.getDepartMaterials(id: Long, page: Integer ?= 1, size: Integer ?=0)
GET           /depart/:id/users                      controllers.gen.DepartController.getDepartUsers(id: Long, page: Integer ?= 1, size: Integer ?=0)

DELETE        /depart/:id                            controllers.gen.DepartController.delete(id: Long)


# Dict
GET           /p/dict                                controllers.gen.DictController.dictPage(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="", page: Integer ?= 1, size:Integer ?=0)
GET           /admin/dict                            controllers.gen.DictController.dictBackendPage()
GET           /report/dict                           controllers.gen.DictController.report(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="")
GET           /new/dict                              controllers.gen.DictController.getNew()

PUT           /dict/:id                              controllers.gen.DictController.update(id: Long)
POST          /dict                                  controllers.gen.DictController.add()


# FixRecord
GET           /p/fixrecord                           controllers.gen.FixRecordController.fixRecordPage(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="", page: Integer ?= 1, size:Integer ?=0)
GET           /admin/fixrecord                       controllers.gen.FixRecordController.fixRecordBackendPage()
GET           /report/fixrecord                      controllers.gen.FixRecordController.report(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="")
GET           /new/fixrecord                         controllers.gen.FixRecordController.getNew()

PUT           /fixrecord/:id                         controllers.gen.FixRecordController.update(id: Long)
POST          /fixrecord                             controllers.gen.FixRecordController.add()


# FixRequest
GET           /p/fixrequest                          controllers.gen.FixRequestController.fixRequestPage(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="", page: Integer ?= 1, size:Integer ?=0)
GET           /admin/fixrequest                      controllers.gen.FixRequestController.fixRequestBackendPage()
GET           /report/fixrequest                     controllers.gen.FixRequestController.report(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="")
GET           /new/fixrequest                        controllers.gen.FixRequestController.getNew()

PUT           /fixrequest/:id                        controllers.gen.FixRequestController.update(id: Long)
POST          /fixrequest                            controllers.gen.FixRequestController.add()


# Location
GET           /p/location                            controllers.gen.LocationController.locationPage(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="", page: Integer ?= 1, size:Integer ?=0)
GET           /admin/location                        controllers.gen.LocationController.locationBackendPage()
GET           /report/location                       controllers.gen.LocationController.report(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="")
GET           /new/location                          controllers.gen.LocationController.getNew()

PUT           /location/:id                          controllers.gen.LocationController.update(id: Long)
POST          /location                              controllers.gen.LocationController.add()


# Material
GET           /p/material                            controllers.gen.MaterialController.materialPage(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="", page: Integer ?= 1, size:Integer ?=0)
GET           /admin/material                        controllers.gen.MaterialController.materialBackendPage()
GET           /report/material                       controllers.gen.MaterialController.report(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="")
GET           /new/material                          controllers.gen.MaterialController.getNew()

PUT           /material/:id                          controllers.gen.MaterialController.update(id: Long)
POST          /material                              controllers.gen.MaterialController.add()

GET           /material/:id/departs                  controllers.gen.MaterialController.getMaterialDeparts(id: Long, page: Integer ?= 1, size: Integer ?=0)

DELETE        /material/:id                          controllers.gen.MaterialController.delete(id: Long)


# Member
GET           /p/member                              controllers.gen.MemberController.memberPage(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="", page: Integer ?= 1, size:Integer ?=0)
GET           /admin/member                          controllers.gen.MemberController.memberBackendPage()
GET           /report/member                         controllers.gen.MemberController.report(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="")
GET           /new/member                            controllers.gen.MemberController.getNew()

PUT           /member/:id                            controllers.gen.MemberController.update(id: Long)
POST          /member                                controllers.gen.MemberController.add()

GET           /member/:id/users                      controllers.gen.MemberController.getMemberUsers(id: Long, page: Integer ?= 1, size: Integer ?=0)

DELETE        /member/:id                            controllers.gen.MemberController.delete(id: Long)


# Purchase
GET           /p/purchase                            controllers.gen.PurchaseController.purchasePage(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="", page: Integer ?= 1, size:Integer ?=0)
GET           /admin/purchase                        controllers.gen.PurchaseController.purchaseBackendPage()
GET           /report/purchase                       controllers.gen.PurchaseController.report(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="")
GET           /new/purchase                          controllers.gen.PurchaseController.getNew()

PUT           /purchase/:id                          controllers.gen.PurchaseController.update(id: Long)
POST          /purchase                              controllers.gen.PurchaseController.add()


# User
GET           /p/user                                controllers.gen.UserController.userPage(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="", page: Integer ?= 1, size:Integer ?=0)
GET           /admin/user                            controllers.gen.UserController.userBackendPage()
GET           /report/user                           controllers.gen.UserController.report(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="")
GET           /new/user                              controllers.gen.UserController.getNew()

PUT           /user/:id                              controllers.gen.UserController.update(id: Long)
POST          /user                                  controllers.gen.UserController.add()

GET           /user/:id/auths                        controllers.gen.UserController.getUserAuths(id: Long, page: Integer ?= 1, size: Integer ?=0)
GET           /user/:id/departs                      controllers.gen.UserController.getUserDeparts(id: Long, page: Integer ?= 1, size: Integer ?=0)
GET           /user/:id/members                      controllers.gen.UserController.getUserMembers(id: Long, page: Integer ?= 1, size: Integer ?=0)

DELETE        /user/:id                              controllers.gen.UserController.delete(id: Long)


# UseRequest
GET           /p/userequest                          controllers.gen.UseRequestController.useRequestPage(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="", page: Integer ?= 1, size:Integer ?=0)
GET           /admin/userequest                      controllers.gen.UseRequestController.useRequestBackendPage()
GET           /report/userequest                     controllers.gen.UseRequestController.report(status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="")
GET           /new/userequest                        controllers.gen.UseRequestController.getNew()

PUT           /userequest/:id                        controllers.gen.UseRequestController.update(id: Long)
POST          /userequest                            controllers.gen.UseRequestController.add()



# Backend management
GET           /admin                                 controllers.Application.backendPage()

# Base API
GET           /base/:modelName/all                   controllers.BaseController.getAll(modelName: String, status :Integer?=(-100), notStatus :Integer?=(-100), fieldOn :String?="", fieldValue :String?="", isAnd :Boolean?=true, searchOn :String?="", kw :String?="", startTime :String?="", endTime :String?="", order :String ?="", sort :String ?="", page: Integer ?= 1, size:Integer ?=0)
GET           /base/:modelName/:id                   controllers.BaseController.getOne(modelName: String, id: Long)
DELETE        /base/:modelName/:id                   controllers.BaseController.delete(modelName: String, id: Long)
# POST          /base/html/:modelName/:id            controllers.BaseController.doHtmlDeleteOne(modelName: String, id: Long)

# Login auth
GET           /login                                 controllers.Application.login()
#GET           /logout                                      controllers.Application.logout()

# Backend auth
GET           /admin/login                           controllers.Application.backendLogin()
GET           /admin/auth                            controllers.Application.backendAuthenticate()
GET           /admin/logout                          controllers.Application.backendLogout()

# check
GET           /check                                 controllers.Application.checkAlive()
GET           /check/cfg                             controllers.Application.cfgSelfCheck()

# session
GET           /session/clear                         controllers.Application.clearSession()

# Static resource
GET           /assets/*file                          controllers.Assets.at(path="/public", file)

# image & thumb
POST          /upload/image                          controllers.ImageController.uploadImage()
GET           /showImage/:name                       controllers.ImageController.showImage(name: String)
GET           /showBarcode/:name                     controllers.ImageController.showBarcode(name: String)
GET           /showimg/:folder/:name                 controllers.ImageController.showImg(folder :String, name: String)
GET           /genthumb                              controllers.ImageController.generateAllThumbNailImg(tagsize :Float ?=0)

# Captcha on server
GET           /captcha                               controllers.Application.captcha(tag: String?="common")

# DB Backup
GET           /db/backup/:dbtype                     controllers.DbController.dbBackup(dbtype :String)
GET           /db/backup/send/:dbtype                controllers.DbController.dbBackupAndSendEmail(dbtype :String)

# Web socket
GET           /chat/connect                          controllers.Application.webSocket()
GET           /chat/msg/:msg                         controllers.Application.chat(msg: String)
GET           /chat/channels                         controllers.Application.getChannels()

#i18n
GET           /i18n                                  controllers.Application.changeLanguage(lang: String?="zh-CN")

# weixin
GET           /weixin/serververify                   controllers.WeiXinController.serverVerify(signature :String, timestamp :String, nonce :String, echostr :String)
POST          /weixin/serververify                   controllers.WeiXinController.serverNotification()
GET           /users/sync/info                       controllers.WeiXinController.syncUserInfo()
GET           /wx/menu/add                           controllers.WeiXinController.addMenu()
GET           /MP_verify_S8YeiakuEjLIIOKn.txt        controllers.Assets.at(path="/public", file="MP_verify_S8YeiakuEjLIIOKn.txt")
GET           /dowxuser                              controllers.WeiXinController.doWxUser(code :String ?="", resellerCode :String ?="", path :String ?="")

# sms captcha
GET           /p/phone/bind                          controllers.Application.phoneBindPage()
POST          /sms/captcha/get                       controllers.SmsInfoController.getVetfy()
POST          /sms/captcha/check                     controllers.SmsInfoController.verifyCode()
POST          /phone/bind                            controllers.SmsInfoController.phoneBind()